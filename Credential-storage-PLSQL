CREATE TABLE users_credentials (
    username VARCHAR2(100) PRIMARY KEY,
    password_hash RAW(256) -- Store hash as RAW
);



CREATE OR REPLACE PROCEDURE store_user_credentials (
    p_username IN VARCHAR2,
    p_password IN VARCHAR2
) AS
    v_hash RAW(32); -- SHA-256 hash size is 32 bytes
BEGIN
    -- Generate hash of the password
    v_hash := DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW(p_password, 'AL32UTF8'), DBMS_CRYPTO.HASH_SH256);

    -- Insert or update the user record
    MERGE INTO users_credentials u
    USING (SELECT p_username AS username FROM dual) src
    ON (u.username = src.username)
    WHEN MATCHED THEN
        UPDATE SET u.password_hash = v_hash
    WHEN NOT MATCHED THEN
        INSERT (username, password_hash) VALUES (p_username, v_hash);

    DBMS_OUTPUT.PUT_LINE('User credentials stored successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/




CREATE OR REPLACE PROCEDURE verify_user_password (
    p_username IN VARCHAR2,
    p_password IN VARCHAR2
) AS
    v_stored_hash RAW(32);
    v_input_hash  RAW(32);
BEGIN
    -- Generate hash of the input password
    v_input_hash := DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW(p_password, 'AL32UTF8'), DBMS_CRYPTO.HASH_SH256);

    -- Fetch the stored hash from the database
    SELECT password_hash INTO v_stored_hash
    FROM users_credentials
    WHERE username = p_username;

    -- Compare the two hashes
    IF v_stored_hash = v_input_hash THEN
        DBMS_OUTPUT.PUT_LINE('Password matched successfully.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Incorrect password.');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Username not found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
